
const mongoose=require('mongoose')
const token = ''
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const userService=require('./service/user-service')
const Stage = require('telegraf')




const greeterScene = new Scenes.BaseScene('greeter')
greeterScene.enter(async(ctx) => {
    chatId=ctx.message.chat.id;
    ctx.reply('–ú–µ–Ω—é –í–∞—â–∏—Ö –∞–≤—Ç–æ –∞–≤—Ç–æ')
    ctx.reply(`–ê–≤—Ç–æ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–ª–µ–¥–∏—Ç–µ`)
       const list= await userService.listcar(chatId)
       for(let i=0;i<list.length;i++)
       {
        await ctx.reply(list[i])
       }
       ctx.scene.leave()
})








const delcar = new Scenes.BaseScene('delcar')

/// esli oisat to heade
delcar.enter(async(ctx) =>{ 
    chatId=ctx.message.chat.id;
    //ctx.reply('–ú–µ–Ω—é –£–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ –∞–≤—Ç–æ')

    ctx.reply('–í–∞—â–∏ –∞–≤—Ç–æ')
    const list= await userService.listcar(chatId)
    
    for(let i=0;i<list.length;i++){
        await ctx.reply(list[i])
    }
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π \n–∫–æ—Ç–æ—Ä—ã–∫ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å \n—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    ctx.telegram.sendMessage(ctx.chat.id, 'E—Å–ª–∏ —Ö–æ—Ç–∏—Ç–∫ –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
    {
        reply_markup: {
            inline_keyboard: [
               [{text:"–í—ã–π—Ç–∏", callback_data: "/exit"}],
             
           ]
        }
    });
});
   

delcar.action('/exit', (ctx) => ctx.scene.leave())
delcar.leave((ctx) => ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ'))

delcar.on('text',async(ctx)=>{
    const number=String(ctx.message.text)
    chatId=ctx.message.chat.id;
    let arr = number.split(',');
    console.log(arr)

    if(arr.length!=0){
        userService.del(arr,chatId)
    }
    else{
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ –∫–æ—Ç–æ—Ä—ã–∫ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ \',\' ')
    ctx.scene.reenter() 
    }
})
delcar.on('message',(ctx)=>ctx.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!!!'))


const echoScene = new Scenes.BaseScene('echo')
echoScene.enter(async(ctx)=>{
    //await ctx.reply('–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ')
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ')
    ctx.telegram.sendMessage(ctx.chat.id, 'E—Å–ª–∏ —Ö–æ—Ç–∏—Ç–∫ –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
    {
        reply_markup: {
            inline_keyboard: [
               [{text:"–í—ã–π—Ç–∏", callback_data: "/exit"}],
             
           ]
        }
    });
})

echoScene.action('/exit', (ctx) => ctx.scene.leave())
echoScene.leave((ctx) => ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ'))



echoScene.on('text',async(ctx)=>{
    const url=String(ctx.message.text)
    if(url.includes('https://auto.ria.com/')){
        const chatId=ctx.message.chat.id;
    
        await userService.subscruber(url,chatId)
        const a=await userService.sendinfo(url) 
        await ctx.reply('–û—Ç–ª–∏—á–Ω–æ!')
    
      function sendmes() {
        ctx.reply('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ê–≤—Ç–æ:\n\n'+a[0])
      }
      async function sendpho (){
        await ctx.replyWithPhoto({ source: a[1]});
        await ctx.reply('–ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞ –∞–≤—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è,\n–Ø –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π')
      }
        await setTimeout(sendmes,1000)
        await setTimeout(sendpho,1500) 
        userService.deletepicher(url)
           return echoScene
    }else{
        await ctx.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!!!')
        ctx.scene.reenter()
    }
})
echoScene.on('message',(ctx)=>ctx.reply('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n'))


const bot = new Telegraf(token, {});
const stage = new Scenes.Stage()
stage.register(delcar,echoScene,greeterScene)



const start=async()=>{
    try{
        await mongoose.connect(process.env.DB_URL,{
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
        bot.use(session())
        bot.use(stage.middleware())
        bot.start((ctx) =>{
            ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.chat.first_name}!!!\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç –Ω–∞–∂–º–∏ –û–ø–∏—Å–∞–Ω–∏–µ üóíÔ∏è`)
            ctx.reply('–ì–õ–ê–í–ù–û–ö –ú–ï–ù–Æ',Markup.keyboard([
            ['–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üèéÔ∏è','–ú–æ–∏ –∞–≤—Ç–æ üöô'],
            ['–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ ‚ùå','–û–ø–∏—Å–∞–Ω–∏–µ üóíÔ∏è']
        ]).oneTime().resize())})
        bot.hears('–ú–æ–∏ –∞–≤—Ç–æ üöô', (ctx) => ctx.scene.enter('greeter'))
        bot.hears('–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üèéÔ∏è', (ctx) => ctx.scene.enter('echo'))
        bot.hears('–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ ‚ùå', (ctx) => ctx.scene.enter('delcar'))
        bot.hears('–û–ø–∏—Å–∞–Ω–∏–µ üóíÔ∏è', (ctx) => {
            ctx.reply("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ auto.ria.com.\n\n–ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∞ –∞–≤—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π.\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üèéÔ∏è\n–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ –±–æ—Ç—É.\n\n–ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –∞–≤—Ç–æ üöô \n–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–ª–µ–¥–∏—Ç–µ.\n\n–ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ ‚ùå \n–ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ –∏–∑ –≤–µ—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
        })
        bot.on('message', (ctx) => {
            ctx.reply('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç!!!',Markup.keyboard([
                ['–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üèéÔ∏è','–ú–æ–∏ –∞–≤—Ç–æ üöô'],
                ['–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ ‚ùå','–û–ø–∏—Å–∞–Ω–∏–µ üóíÔ∏è']
            ]).oneTime().resize())})
            const a=setInterval(await userService.chekprises,10000)

            bot.startPolling()
    }catch(e){
        console.log(e)
    }
}



start()

